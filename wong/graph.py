#AUTOGENERATED! DO NOT EDIT! File to edit: dev/02_graph.ipynb (unless otherwise specified).

__all__ = ['complete_dag', 'resnet_dag']

#Cell
from .imports import *

#Cell
def complete_dag(n:int):
    "Generate a complete directed acyclic graph, which corresponds to architecture of ResNet."
    G = nx.DiGraph()
    nodes = list(range(n))
    for id in nodes:
        for succ in range(id+1, n):
            G.add_edge(id, succ)
    return G

#Cell
def resnet_dag(num_nodes:tuple):
    "Generate the DAG corresponding to the architecture of ResNet. Input is numbers of nodes of all stages."
    num_stages = len(num_nodes)
    G = nx.DiGraph()
    # an unique input node which connected to all nodes of the first stage,
    # and the two nodes that accross first stage and secton stage

    # an unique output node with connected to all nodes of the last stage